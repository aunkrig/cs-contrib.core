<!-- This file was generated by the CS doclet; see http://cs-contrib.unkrig.de -->
Verifies that statements are uniformly wrapped and indented.
<p style="color: red">
  <b>This check supersedes the following checks:</b>
</p>
<ul style="color: red">
  <li>Left curly brace placement</li>
  <li>Right curly brace placement</li>
  <li>Operator wrap</li>
</ul>

== Properties ==

Default values appear <u>underlined</u>.

<h3>Indentation</h3>

<dl>
<dt>basicOffset = "<i>Integer</i>" (optional; default value is 4)
<dd>How many spaces to use for each new indentation level.
</dl>

<h3>One-line Declarations</h3> <p> The following properties refer to 'one-line declarations', i.e. declarations completely without line breaks. </p>

<dl>
<dt>allowOneLineClassDecl = "<u>true</u> | false"
<dd>Whether to allow a complete class declaration in one single line:
 public class Pojo { int fld; }

</dl>

<dl>
<dt>allowOneLineInterfaceDecl = "<u>true</u> | false"
<dd>Whether to allow a complete interface declaration in one single line:
 public interface Interf { void meth(); }

</dl>

<dl>
<dt>allowOneLineEnumDecl = "<u>true</u> | false"
<dd>Whether to allow a complete enum declaration in one single line:
 private enum Color { BLACK, WHITE }

</dl>

<dl>
<dt>allowOneLineAnnoDecl = "<u>true</u> | false"
<dd>Whether to allow a complete annotation declaration in one single line:
 public @interface MyAnno {}

</dl>

<dl>
<dt>allowOneLineCtorDecl = "<u>true</u> | false"
<dd>Whether to allow a complete constructor declaration in one single line:
 protected MyClass() { super(null); }

</dl>

<dl>
<dt>allowOneLineMethDecl = "<u>true</u> | false"
<dd>Whether to allow a complete method declaration in one single line:
 private void meth() { ... }

</dl>

<dl>
<dt>allowOneLineSwitchBlockStmtGroup = "<u>true</u> | false"
<dd>Whether to allow a complete <code>switch</code> block statement group in one single line:
 case 1: case 2: a = 3; break;

</dl>

<h3>Declaration Wrapping</h3> <p> The phrase "wrap before X" means that a line break and spaces appear right before "X", such that "X" is vertically aligned with the first token in the immediately preceding line. </p>

<dl>
<dt>wrapPackageDeclBeforePackage = "<u>always</u> | optional | never"
<dd>Whether to wrap package declarations before the <code>package</code> keyword (in "<code>package-info.java</code>"):
 &#64;NonNullByDefault
 package com.acme.product;

</dl>

<dl>
<dt>wrapClassDeclBeforeClass = "<u>always</u> | optional | never"
<dd>Whether to wrap class declarations before the <code>class</code> keyword:
 public static final
 class MyClass {

</dl>

<dl>
<dt>wrapInterfaceDeclBeforeInterface = "<u>always</u> | optional | never"
<dd>Whether to wrap interface declarations before the <code>interface</code> keyword:
 public
 interface MyInterf {

</dl>

<dl>
<dt>wrapEnumDeclBeforeEnum = "<u>always</u> | optional | never"
<dd>Whether to wrap enum declarations before the <code>enum</code> keyword:
 protected
 enum MyEnum {

</dl>

<dl>
<dt>wrapAnnoDeclBeforeAt = "<u>always</u> | optional | never"
<dd>Whether to wrap annotation declarations before '@':
 private
 &#64;interface MyAnno {

</dl>

<dl>
<dt>wrapFieldDeclBeforeName = "always | <u>optional</u> | never"
<dd>Whether to wrap field declarations before the field name:
 private int
 width = 7;

</dl>

<dl>
<dt>wrapCtorDeclBeforeName = "<u>always</u> | optional | never"
<dd>Whether to wrap constructor declarations between the modifiers and the class name:
 protected
 MyClass(int x) {

</dl>

<dl>
<dt>wrapMethDeclBeforeName = "<u>always</u> | optional | never"
<dd>Whether to wrap method declarations between the return type and the method name:
 private static
 myMeth(int arg1) {

</dl>

<dl>
<dt>wrapLocVarDeclBeforeName = "always | <u>optional</u> | never"
<dd>Whether to wrap local variable declarations between the type and the variable name:
 int
 locvar = 7;

</dl>

<dl>
<dt>wrapTypeDeclBeforeLCurly = "always | optional | <u>never</u>"
<dd>Whether to wrap type declarations before the opening curly brace:
 public class MyClass
 {

</dl>

<dl>
<dt>wrapCtorDeclBeforeLCurly = "always | optional | <u>never</u>"
<dd>Whether to wrap constructor declarations before the opening curly brace:
 protected MyClass(int x)
 {

</dl>

<dl>
<dt>wrapMethodDeclBeforeLCurly = "always | optional | <u>never</u>"
<dd>Whether to wrap method declarations before the opening curly brace:
 private static myMeth(int arg1)
 {

</dl>

<dl>
<dt>wrapAnonClassDeclBeforeLCurly = "always | optional | <u>never</u>"
<dd>Whether to wrap anonymous class declarations before the opening curly brace:
 new Object()
 {

</dl>

<h3>Other Elements Wrapping</h3> <p> The phrase "wrap before X" means that a line break and space appear right before "X", such that "X" is vertically aligned with the first token in the immediately preceding line. </p>

<dl>
<dt>wrapDoBeforeLCurly = "always | optional | <u>never</u>"
<dd>Whether to wrap <code>do</code> statements before the opening curly brace:
 do
 {

</dl>

<dl>
<dt>wrapTryBeforeCatch = "always | <u>optional</u> | never"
<dd>Whether to wrap <code>try</code> statements before the <code>catch</code> keyword:
 try { ... }
 catch { ... }

</dl>

<dl>
<dt>wrapTryBeforeFinally = "always | <u>optional</u> | never"
<dd>Whether to wrap <code>try</code> statements before the <code>finally</code> keyword:
 try { ... }
 finally { ... }

</dl>

<dl>
<dt>wrapArrayInitBeforeLCurly = "always | optional | <u>never</u>"
<dd>Whether to wrap array initializers before the opening curly brace:
 int[] ia =
 {

</dl>

<dl>
<dt>wrapBeforeBinaryOperator = "always | <u>optional</u> | never"
<dd>Whether to wrap expressions before a binary operator ("<code>+ - * / % &amp; | ^ << >> >>></code>", assignment
operators and/or "<code>. <= < == != >= > &amp;&amp; || instanceof</code>"):
 a
 + b
 + c

</dl>

<dl>
<dt>wrapAfterBinaryOperator = "always | optional | <u>never</u>"
<dd>Whether to wrap expressions after a binary operator ("<code>+ - * / % &amp; | ^ << >> >>></code>", assignment
operators and/or "<code>. <= < == != >= > &amp;&amp; || instanceof</code>"):
 a +
 b +
 c

</dl>

<p>
  Quickfixes are available for this check.
</p>
