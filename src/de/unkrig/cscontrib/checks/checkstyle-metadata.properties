
# Groups of checks.
Naming.group     = Naming Conventions
Coding.group     = Coding Problems
Other.group      = Other
Whitespace.group = Whitespace
Filters.group    = Filters

# Custom checks, in alphabetical order.

# --------------- de.unkrig.Alignment ---------------

de.unkrig.cscontrib.checks.Alignment.name = de.unkrig.Alignment
de.unkrig.cscontrib.checks.Alignment.desc = Checks that Java elements are vertically aligned in immediately consecutive lines (and only there\!)\:<pre>    public class Main {\n\n        int    <font color\="red">x</font> \= 7;\n        double <font color\="red">xxx</font> \= 7.0;              // Aligned field names\n\n        int y      <font color\="red">\=</font> 7;\n        double yyy <font color\="red">\=</font> 7.0;              // Aligned field initializers\n\n        public static void meth1(\n            String[] <font color\="red">p1</font>,\n            int      <font color\="red">p2</font>                // Aligned parameter names\n        ) {\n\n            int    <font color\="red">x</font> \= 7;\n            double <font color\="red">xxx</font> \= 7.0;          // Aligned local variable names\n\n            int y      <font color\="red">\=</font> 7;\n            double yyy <font color\="red">\=</font> 7.0;          // Aligned local variable initializers\n\n            y   <font color\="red">\=</font> 8;\n            yyy <font color\="red">\=</font> 8.0;                 // Aligned assignments\n\n            switch (x) {\n            case 1\:  <font color\="red">break;</font>\n            default\: <font color\="red">x++;</font> return;      // Aligned case groups statements\n            }\n        }\n\n        public static void <font color\="red">meth2</font>()  <font color\="red">{}</font>\n        public void        <font color\="red">meth33</font>() <font color\="red">{}</font> // Aligned method names and bodies\n    }</pre>
de.unkrig.cscontrib.checks.Alignment.applyToFieldName                = Check alignment of field names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToFieldInitializer         = Check alignment of '=' in field declarations.
de.unkrig.cscontrib.checks.Alignment.applyToLocalVariableName        = Check alignment of local variable names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToLocalVariableInitializer = Check alignment of '=' in local variable declarations.
de.unkrig.cscontrib.checks.Alignment.applyToParameterName            = Check alignment of constructor and method parameter names.
de.unkrig.cscontrib.checks.Alignment.applyToMethodName               = Check alignment of method (and constructor) names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToMethodBody               = Check alignment of '{' in method (and constructor) declarations.
de.unkrig.cscontrib.checks.Alignment.applyToCaseGroupStatements      = Check alignment of first statement in case groups.
de.unkrig.cscontrib.checks.Alignment.applyToAssignments              = Check alignment of '=' in assignments.

# --------------- de.unkrig.InnerAssignment ---------------

de.unkrig.cscontrib.checks.InnerAssignment.name = de.unkrig.InnerAssignment
de.unkrig.cscontrib.checks.InnerAssignment.desc = Assignments in expressions must be parenthesized.

# --------------- de.unkrig.NameSpelling ---------------

de.unkrig.cscontrib.checks.NameSpelling.name = de.unkrig.NameSpelling
de.unkrig.cscontrib.checks.NameSpelling.desc = Checks that the names of Java elements match a given pattern.
de.unkrig.cscontrib.checks.NameSpelling.elements          = Elements to apply this check to
de.unkrig.cscontrib.checks.NameSpelling.requiredModifiers = Apply only to declarations which have these modifiers
de.unkrig.cscontrib.checks.NameSpelling.missingModifiers  = Apply only to declarations which do not have these modifiers
de.unkrig.cscontrib.checks.NameSpelling.option            = Whether to REQUIRE or FORBID that names match
de.unkrig.cscontrib.checks.NameSpelling.format            = Pattern to match the name against

# --------------- de.unkrig.ParenPad ---------------

de.unkrig.cscontrib.checks.ParenPad.name = de.unkrig.ParenPad
de.unkrig.cscontrib.checks.ParenPad.desc = Enhanced version of "ParenPad": NOSPACE now allows '( // ...'.
de.unkrig.cscontrib.checks.ParenPad.option = Whether space is required or forbidding
de.unkrig.cscontrib.checks.ParenPad.tokens = Tokens to check

# --------------- de.unkrig.Whitespace ---------------

de.unkrig.cscontrib.checks.Whitespace.name = de.unkrig.Whitespace
de.unkrig.cscontrib.checks.Whitespace.desc = \
    Checks that tokens are (or are not) preceded with (and/or followed by) whitespace.\
    <p>\
    This check supersedes all of CheckStyle's whitespace-related checks\
    <ul>\
      <li>GenericWhitespace\
      <li>Empty For Initializer Pad\
      <li>Empty For Iterator Pad\
      <li>No Whitespace After\
      <li>No Whitespace Before\
      <li>Method Parameter Pad\
      <li>Paren Pad\
      <li>Typecast Paren Pad\
      <li>Whitespace After\
      <li>Whitespace Around\
    </ul>\
    , as well as\
    <ul>\
      <li>de.unkrig.ParenPad\
      <li>de.unkrig.WhitespaceAround\
    </ul>\
    .\
    <p>\
    The options of the four properties represent all Java tokens. If a token can appear in different contexts, then\
    it appears multiply, with two underscores an the context appended to its name.\
    <dl>\
      <dt>ABSTRACT\
      <dd>The 'abstract' modifier\
      <dt>AND__EXPR\
      <dd>The bitwise and logical AND operator (JLS 7 15.22): {@code a <font color="red">&amp;</font> b}\
      <dt>AND__TYPE_BOUND\
      <dd>{@code &lt;T extends MyClass <font color="red">&amp;</font> MyInterface>'}\
      <dt>AND_ASSIGN\
      <dd>The '&=' compound assignment operator: {@code a <font color="red">&amp;=</font> b} */
    </dl> (TODO: To be continued.)
de.unkrig.cscontrib.checks.Whitespace.whitespaceBefore.desc   = The Java elements which must be preceded with whitespace (or a line break)
de.unkrig.cscontrib.checks.Whitespace.noWhitespaceBefore.desc = The Java elements which must not be preceded with whitespace (or are preceded with a line break)
de.unkrig.cscontrib.checks.Whitespace.whitespaceAfter.desc    = The Java elements which must be followed by whitespace (or a line break)
de.unkrig.cscontrib.checks.Whitespace.noWhitespaceAfter.desc  = The Java elements which must not be followed by whitespace (or are followed by a line break)

# --------------- de.unkrig.WhitespaceAround ---------------

de.unkrig.cscontrib.checks.WhitespaceAround.name = de.unkrig.WhitespaceAround
de.unkrig.cscontrib.checks.WhitespaceAround.desc = Checks that a token is surrounded by whitespace.<p>The following tokens and token combinations are exempted from this check\:<dl><dt><code>public MyClass() <font color\="red">{}</font></code></dt><dd>Empty constructor body (if '<code>allowEmptyConstructors</code>' is set)</dd><dt><code>public void func() <font color\="red">{}</font></code></dt><dd>Empty method body (if '<code>allowEmptyMethods</code>' is set)</dd><dt><code>catch (Exception e) <font color\="red">{}</font></code></dt><dd>Empty method body (if '<code>allowEmptyCatches</code>' is set)</dd><dt><code>interface MyInterface <font color\="red">{}</font></code></dt><dd>Empty method body (if '<code>allowEmptyTypes</code>' is set)</dd><dt><code><font color\="red">})<br>};<br>},<br>}.</font></code></dt><dd>Anonymous classes</dd><dt><code>a \= new <font color\="red">{ x, y, z }</font><br>Object[] oa \= <font color\="red">{ x, y, z }</font></code></dt><dd>Array initializer</dd><dt><code>import pkg.name.<font color\="red">*</font>;</code></dt><dd>Import-on-demand declaration</dd><dt><code>case 7<font color\="red">\:</font><br>default<font color\="red">\:</font></code></dt><dd>Switch label</dd><dt><code>for (String var <font color\="red">\:</font> list { ...</code></dt><dd>Enhanced FOR statement (if '<code>ignoreEnhancedForColon</code>' is set)</dd></dl>
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyConstructors = Allow empty constructor bodies
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyMethods      = Allow empty method bodies
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyCatches      = Allow empty catch blocks
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyTypes        = Allow empty class and interface bodies
de.unkrig.cscontrib.checks.WhitespaceAround.ignoreEnhancedForColon = Whether or not to ignore a colon in an enhanced for loop
de.unkrig.cscontrib.checks.WhitespaceAround.tokens                 = Tokens to check

# --------------- de.unkrig.WrapAndIndent ---------------

de.unkrig.cscontrib.checks.WrapAndIndent.name = de.unkrig.WrapAndIndent
de.unkrig.cscontrib.checks.WrapAndIndent.desc = Statements must be uniformly wrapped and indented.
de.unkrig.cscontrib.checks.WrapAndIndent.basicOffset = How many spaces to use for new indentation level

# --------------- de.unkrig.ZeroParameterSuperconstructorInvocation ---------------

de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation.name = de.unkrig.ZeroParameterSuperconstructorInvocation
de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation.desc = Checks that no constructor calls the zero-parameter superconstructor.

# Custom filters, in alphabetical order.

# --------------- de.unkrig.SuppressionLine ---------------

de.unkrig.cscontrib.filters.SuppressionLine.name = de.unkrig.SuppressionLine
de.unkrig.cscontrib.filters.SuppressionLine.desc = Events (i.e. CheckStyle warnings) are switched off by a 'magic line' ('offCommentFormat') or back on by another 'magic line' ('onCommentFormat').\nAfter the 'off' magic line, events do not show if at least one of the following conditions is true\:\n<ul>\n<li>The 'checkNameFormat' (if set) is found in the check name (e.g. 'de.unkrig.cscontrib.checks.Alignment')\n<li>The 'messageFormat' (if set) is found in the event message\n<li>The 'moduleIdFormat' (if set) is found in the ID of the module that generated the event\n</ul>\n\nThis filter can only work if a 'FileContentsHolder' module exists in the configuration.
de.unkrig.cscontrib.filters.SuppressionLine.offFormat       = Line pattern to trigger filter to begin suppression
de.unkrig.cscontrib.filters.SuppressionLine.onFormat        = Line pattern to trigger filter to end suppression
de.unkrig.cscontrib.filters.SuppressionLine.checkNameFormat = Check name pattern to suppress
de.unkrig.cscontrib.filters.SuppressionLine.messageFormat   = Message pattern to suppress
de.unkrig.cscontrib.filters.SuppressionLine.moduleIdFormat  = Module ID pattern to suppress
