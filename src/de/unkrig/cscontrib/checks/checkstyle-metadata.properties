
# Groups of checks.
Naming.group     = Naming Conventions
Coding.group     = Coding Problems
Other.group      = Other
Whitespace.group = Whitespace
Filters.group    = Filters

# Custom checks, in alphabetical order.

de.unkrig.cscontrib.checks.InnerAssignment.name = de.unkrig.InnerAssignment
de.unkrig.cscontrib.checks.InnerAssignment.desc = Assignments in expressions must be parenthesized.

de.unkrig.cscontrib.checks.Alignment.name = de.unkrig.Alignment
de.unkrig.cscontrib.checks.Alignment.desc =\
    Checks that Java elements are vertically aligned in immediately consecutive lines (and only there\!)\:<pre>\
    \    public class Main {\n\
    \n\
    \        int    <font color="red">x</font> = 7;\n\
    \        double <font color="red">xxx</font> = 7.0;              // Aligned field names\n\
    \n\
    \        int y      <font color="red">=</font> 7;\n\
    \        double yyy <font color="red">=</font> 7.0;              // Aligned field initializers\n\
    \n\
    \        public static void meth1(\n\
    \            String[] <font color="red">p1</font>,\n\
    \            int      <font color="red">p2</font>                // Aligned parameter names\n\
    \        ) {\n\
    \n\
    \            int    <font color="red">x</font> = 7;\n\
    \            double <font color="red">xxx</font> = 7.0;          // Aligned local variable names\n\
    \n\
    \            int y      <font color="red">=</font> 7;\n\
    \            double yyy <font color="red">=</font> 7.0;          // Aligned local variable initializers\n\
    \n\
    \            y   <font color="red">=</font> 8;\n\
    \            yyy <font color="red">=</font> 8.0;                 // Aligned assignments\n\
    \n\
    \            switch (x) {\n\
    \            case 1:  <font color="red">break;</font>\n\
    \            default: <font color="red">x++;</font> return;      // Aligned case groups statements\n\
    \            }\n\
    \        }\n\
    \n\
    \        public static void <font color="red">meth2</font>()  <font color="red">{}</font>\n\
    \        public void        <font color="red">meth33</font>() <font color="red">{}</font> // Aligned method names and bodies\n\
    \    }</pre>
de.unkrig.cscontrib.checks.Alignment.applyToFieldName                = Check alignment of field names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToFieldInitializer         = Check alignment of '=' in field declarations.
de.unkrig.cscontrib.checks.Alignment.applyToLocalVariableName        = Check alignment of local variable names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToLocalVariableInitializer = Check alignment of '=' in local variable declarations.
de.unkrig.cscontrib.checks.Alignment.applyToParameterName            = Check alignment of constructor and method parameter names.
de.unkrig.cscontrib.checks.Alignment.applyToMethodName               = Check alignment of method (and constructor) names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToMethodBody               = Check alignment of '{' in method (and constructor) declarations.
de.unkrig.cscontrib.checks.Alignment.applyToCaseGroupStatements      = Check alignment of first statement in case groups.
de.unkrig.cscontrib.checks.Alignment.applyToAssignments              = Check alignment of '=' in assignments.

de.unkrig.cscontrib.checks.NameSpelling.name = de.unkrig.NameSpelling
de.unkrig.cscontrib.checks.NameSpelling.desc = Checks that the names of Java elements match a given pattern.
de.unkrig.cscontrib.checks.NameSpelling.elements          = Elements to apply this check to
de.unkrig.cscontrib.checks.NameSpelling.requiredModifiers = Apply only to declarations which have these modifiers
de.unkrig.cscontrib.checks.NameSpelling.missingModifiers  = Apply only to declarations which do not have these modifiers
de.unkrig.cscontrib.checks.NameSpelling.option            = Whether to REQUIRE or FORBID that names match
de.unkrig.cscontrib.checks.NameSpelling.format            = Pattern to match the name against

de.unkrig.cscontrib.checks.ParenPad.name = de.unkrig.ParenPad
de.unkrig.cscontrib.checks.ParenPad.desc = Enhanced version of "ParenPad": NOSPACE now allows '( // ...'.
de.unkrig.cscontrib.checks.parenPad.option = Whether space is required or forbidding
de.unkrig.cscontrib.checks.parenPad.tokens = Tokens to check

de.unkrig.cscontrib.checks.WhitespaceAround.name = de.unkrig.WhitespaceAround
de.unkrig.cscontrib.checks.WhitespaceAround.desc = Checks that a token is surrounded by whitespace. Empty constructor bodies, method bodies, catch blocks and type bodies of the form\n<pre>    public MyClass() {}           // empty constructor body\n\n    public void func() {}         // empty method body\n\n    public void func() {\n        new Object() {\n            // ...\n        }.hashCode();             // No space between '}' and '.' -- always allowed\n\n        try {\n            // ...\n        } catch {}                // empty catch block\n    }\n\ninterface MyInterface {}      // emtpy type body\n</pre>\nmay optionally be exempted from the policy using the <code>allowEmptyMethods</code>, <code>allowEmptyConstructors</code>, <code>allowEmptyCatches</code> and <code>allowEmptyTypes</code> properties.
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyConstructors = allow empty constructor bodies
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyMethods      = allow empty method bodies
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyCatches      = allow empty catch blocks
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyTypes        = allow empty class and interface bodies
de.unkrig.cscontrib.checks.WhitespaceAround.tokens                 = Tokens to check

de.unkrig.cscontrib.checks.WrapAndIndent.name = de.unkrig.WrapAndIndent
de.unkrig.cscontrib.checks.WrapAndIndent.desc = Statements must be uniformly wrapped and indented.
de.unkrig.cscontrib.checks.WrapAndIndent.basicOffset = How many spaces to use for new indentation level

de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation.name = de.unkrig.ZeroParameterSuperconstructorInvocation
de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation.desc = Checks that no constructor calls the zero-parameter superconstructor.

# Custom filters, in alphabetical order.

de.unkrig.cscontrib.filters.SuppressionLine.name = de.unkrig.SuppressionLine
de.unkrig.cscontrib.filters.SuppressionLine.desc = Events (i.e. CheckStyle warnings) are switched off by a 'magic line' ('offCommentFormat') or back on by another 'magic line' ('onCommentFormat').\nAfter the 'off' magic line, events do not show if at least one of the following conditions is true\:\n<ul>\n<li>The 'checkNameFormat' (if set) is found in the check name (e.g. 'de.unkrig.cscontrib.checks.Alignment')\n<li>The 'messageFormat' (if set) is found in the event message\n<li>The 'moduleIdFormat' (if set) is found in the ID of the module that generated the event\n</ul>\n\nThis filter can only work if a 'FileContentsHolder' module exists in the configuration.
de.unkrig.cscontrib.filters.SuppressionLine.offFormat       = Line pattern to trigger filter to begin suppression
de.unkrig.cscontrib.filters.SuppressionLine.onFormat        = Line pattern to trigger filter to end suppression
de.unkrig.cscontrib.filters.SuppressionLine.checkNameFormat = Check name pattern to suppress
de.unkrig.cscontrib.filters.SuppressionLine.messageFormat   = Message pattern to suppress
de.unkrig.cscontrib.filters.SuppressionLine.moduleIdFormat  = Module ID pattern to suppress
