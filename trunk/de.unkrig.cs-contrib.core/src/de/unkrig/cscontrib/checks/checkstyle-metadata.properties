
# This file was generated by the CS doclet; see http://cs-contrib.unkrig.de.

# Rule groups:
Coding.group     = Coding Problems
Naming.group     = Naming Conventions
Whitespace.group = Whitespace

# Custom checks, in alphabetical order.

# --------------- de.unkrig.Alignment ---------------

de.unkrig.cscontrib.checks.Alignment.name = de.unkrig.Alignment
de.unkrig.cscontrib.checks.Alignment.desc =\
	Verifies that Java elements are vertically aligned in immediately consecutive lines (and only there!):\n\
	<pre>\n\
	public class Main {\n\
	\n\
	\    int    <font color="red">x</font> = 7;\n\
	\    double <font color="red">xxx</font> = 7.0;              // Aligned field names\n\
	\n\
	\    int y      <font color="red">=</font> 7;\n\
	\    double yyy <font color="red">=</font> 7.0;              // Aligned field initializers\n\
	\n\
	\    public static void meth1(\n\
	\        String[] <font color="red">p1</font>,\n\
	\        int      <font color="red">p2</font>                // Aligned parameter names\n\
	\    ) {\n\
	\n\
	\        int    <font color="red">x</font> = 7;\n\
	\        double <font color="red">xxx</font> = 7.0;          // Aligned local variable names\n\
	\n\
	\        int y      <font color="red">=</font> 7;\n\
	\        double yyy <font color="red">=</font> 7.0;          // Aligned local variable initializers\n\
	\n\
	\        y   <font color="red">=</font> 8;\n\
	\        yyy <font color="red">=</font> 8.0;                 // Aligned assignments\n\
	\n\
	\        switch (x) {\n\
	\        case 1:  <font color="red">break;</font>\n\
	\        default: <font color="red">x++;</font> return;      // Aligned case groups statements\n\
	\        }\n\
	\    }\n\
	\n\
	\    public static void <font color="red">meth2</font>() {}\n\
	\    public void        <font color="red">meth33</font>() {} // Aligned method names\n\
	\n\
	\    public static void meth4()  <font color="red">{}</font>\n\
	\    public void meth5()         <font color="red">{}</font> // Aligned method bodies\n\
	}</pre>
de.unkrig.cscontrib.checks.Alignment.applyToFieldName                = Check alignment of first name in field declarations.
de.unkrig.cscontrib.checks.Alignment.applyToFieldInitializer         = Check alignment of first '=' in field declarations.
de.unkrig.cscontrib.checks.Alignment.applyToParameterName            = Check alignment of method (and constructor) parameter names.
de.unkrig.cscontrib.checks.Alignment.applyToLocalVariableName        = Check alignment of first name in local variable declarations.
de.unkrig.cscontrib.checks.Alignment.applyToLocalVariableInitializer = Check alignment of first '=' in local variable declarations.
de.unkrig.cscontrib.checks.Alignment.applyToAssignments              = Check alignment of '=' in assignments.
de.unkrig.cscontrib.checks.Alignment.applyToCaseGroupStatements      = Check alignment of first statement in case groups.
de.unkrig.cscontrib.checks.Alignment.applyToMethodName               = Check alignment of method (and constructor) names in declarations.
de.unkrig.cscontrib.checks.Alignment.applyToMethodBody               = Check alignment of '{' in method (and constructor) declarations.

# --------------- de.unkrig.CppCommentAlignment ---------------

de.unkrig.cscontrib.checks.CppCommentAlignment.name = de.unkrig.CppCommentAlignment
de.unkrig.cscontrib.checks.CppCommentAlignment.desc =\
	Verifies that C++-style comments ('<code>// ...</code>') are correctly aligned.\n\
	<p>\n\
	C++-style comments must appear on the same column iff\n\
	<ul>\n\
	\  <li>They appear in immediately consecutive lines, and\n\
	\  <li>All of these lines are of the same 'kind' (see below)\n\
	</ul>\n\
	Each line of code relates to one of the following 'kinds':\n\
	<ul>\n\
	\  <li>A line which contains only a C++-style comment\n\
	\  <li>A line which contains only a switch label ('<code>case x:</code>' or '<code>default:</code>') and a C++-style comment\n\
	\  <li>Any other line\n\
	</ul>

# --------------- de.unkrig.InnerAssignment ---------------

de.unkrig.cscontrib.checks.InnerAssignment.name = de.unkrig.InnerAssignment
de.unkrig.cscontrib.checks.InnerAssignment.desc =\
	Assignments in expressions must be parenthesized, like "a = (b = c)" or "while ((a = b))".\n\
	<p>\n\
	\  An enhanced version of 'InnerAssignment': It comes with a quickfix for ECLIPSE-CS.\n\
	</p>\n\
	\n\
	Quickfixes are available for this check.

# --------------- de.unkrig.NameSpelling ---------------

de.unkrig.cscontrib.checks.NameSpelling.name = de.unkrig.NameSpelling
de.unkrig.cscontrib.checks.NameSpelling.desc =\
	Verifies that the names of Java elements match, respectively no not match given patterns.\n\
	<p>\n\
	This check makes name checking more powerful, compared with CheckStyle's standard "Naming Conventions" checks:\n\
	</p>\n\
	<ul>\n\
	\  <li>Arbitrary sets of required/forbidden modifiers can be specified</li>\n\
	\  <li>\n\
	\    Name patterns can not only be enforced but also be forbidden (useful, e.g., to forbid certains styles of\n\
	\    hungarian notation)\n\
	\  </li>\n\
	\  <li>\n\
	\    Adds the possibility to check the names of annotations, annotation fields and <code>enum</code>s (which are missing\n\
	\    from the standard checks)\n\
	\  </li>\n\
	</ul>\n\
	<p>\n\
	\  This check supersedes all of the CheckStyle standard "Naming Conventions" checks:\n\
	</p>\n\
	<ul>\n\
	\  <li>Abstract Class Name</li>\n\
	\  <li>Class Type Parameter Name</li>\n\
	\  <li>Constant Names</li>\n\
	\  <li>Enum Values Name</li>\n\
	\  <li>Interface Type Parameter Name</li>\n\
	\  <li>Local Final Variable Names</li>\n\
	\  <li>Local Variable Names</li>\n\
	\  <li>Member Names</li>\n\
	\  <li>Method Names</li>\n\
	\  <li>Method Type Parameter Name</li>\n\
	\  <li>Package Names</li>\n\
	\  <li>Parameter Names</li>\n\
	\  <li>Static Variable Names</li>\n\
	\  <li>Type Names</li>\n\
	</ul>
de.unkrig.cscontrib.checks.NameSpelling.elements                     = Elements to apply this check to.
de.unkrig.cscontrib.checks.NameSpelling.requiredModifiers            = Apply only to declarations which have these modifiers.
de.unkrig.cscontrib.checks.NameSpelling.missingModifiers             = Apply only to declarations which do not have these modifiers.
de.unkrig.cscontrib.checks.NameSpelling.option                       = Whether to require or forbid that names match.
de.unkrig.cscontrib.checks.NameSpelling.format                       = The pattern to match the name against.

# --------------- de.unkrig.ParenPad ---------------

de.unkrig.cscontrib.checks.ParenPad.name = de.unkrig.ParenPad
de.unkrig.cscontrib.checks.ParenPad.desc =\
	Enhanced version of "ParenPad": NOSPACE now allows "<code>( // ...</code>".\n\
	<p>\n\
	\  <span style="color: red"><b>This check is superseded by <code>de.unkrig.Whitespace</code>.</b></span>\n\
	</p>
de.unkrig.cscontrib.checks.ParenPad.option                           = Whether space is required or forbidden.
de.unkrig.cscontrib.checks.ParenPad.tokens                           = Tokens to check.

# --------------- de.unkrig.Whitespace ---------------

de.unkrig.cscontrib.checks.Whitespace.name = de.unkrig.Whitespace
de.unkrig.cscontrib.checks.Whitespace.desc =\
	Verifies that tokens are, respectively are not preceded with (and/or followed by) whitespace.\n\
	<p>\n\
	\  This check supersedes all of CheckStyle's whitespace-related checks:\n\
	</p>\n\
	<ul>\n\
	\  <li>Generic Whitespace</li>\n\
	\  <li>Empty For Initializer Pad</li>\n\
	\  <li>Empty For Iterator Pad</li>\n\
	\  <li>No Whitespace After</li>\n\
	\  <li>No Whitespace Before</li>\n\
	\  <li>Method Parameter Pad</li>\n\
	\  <li>Paren Pad</li>\n\
	\  <li>Typecast Paren Pad</li>\n\
	\  <li>Whitespace After</li>\n\
	\  <li>Whitespace Around</li>\n\
	</ul>\n\
	<p>\n\
	\  , as well as\n\
	</p>\n\
	<ul>\n\
	\  <li>de.unkrig.ParenPad</li>\n\
	\  <li>de.unkrig.WhitespaceAround</li>\n\
	</ul>
de.unkrig.cscontrib.checks.Whitespace.whitespaceBefore               = The Java elements which must be preceded with whitespace (or a line break).
de.unkrig.cscontrib.checks.Whitespace.noWhitespaceBefore             = The Java elements which must not be preceded with whitespace (or are preceded with a line break).
de.unkrig.cscontrib.checks.Whitespace.whitespaceAfter                = The Java elements which must be followed by whitespace (or a line break).
de.unkrig.cscontrib.checks.Whitespace.noWhitespaceAfter              = The Java elements which must not be followed by whitespace (or are followed by a line break).

# --------------- de.unkrig.WhitespaceAround ---------------

de.unkrig.cscontrib.checks.WhitespaceAround.name = de.unkrig.WhitespaceAround
de.unkrig.cscontrib.checks.WhitespaceAround.desc =\
	Verifies that a token is surrounded by whitespace.\n\
	<p>\n\
	\  <span style="color: red"><b>This check is superseded by <code>de.unkrig.Whitespace</code>.</b></span>\n\
	</p>\n\
	<p>\n\
	\  Empty constructor bodies, method bodies, catch blocks and type bodies of the form\n\
	</p>\n\
	<pre>\n\
	public MyClass() {}           // empty constructor body\n\
	\n\
	public void func() {}         // empty method body\n\
	\n\
	public void func() {\n\
	\    new Object() {\n\
	\        // ...\n\
	\    }.hashCode();             // No space between '}' and '.' -- always allowed\n\
	\    try {\n\
	\        // ...\n\
	\    } catch {}                // empty catch block\n\
	}\n\
	\n\
	interface MyInterface {}      // emtpy type body\n\
	</pre>\n\
	<p>\n\
	\  may optionally be exempted from the policy using the allowEmptyMethods, allowEmptyConstructors, allowEmptyCatches\n\
	\  and allowEmptyTypes properties.\n\
	</p>
de.unkrig.cscontrib.checks.WhitespaceAround.tokens                   = Tokens to check.
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyConstructors   = Allow empty constructor bodies.
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyMethods        = Allow empty method bodies.
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyCatches        = Allow empty catch blocks.
de.unkrig.cscontrib.checks.WhitespaceAround.allowEmptyTypes          = Allow empty class and interface bodies.
de.unkrig.cscontrib.checks.WhitespaceAround.ignoreEnhancedForColon   = Ignore the colon (":") token in enhanced {@code for} statements ("{@code for (x : y) ...}").

# --------------- de.unkrig.WrapAndIndent ---------------

de.unkrig.cscontrib.checks.WrapAndIndent.name = de.unkrig.WrapAndIndent
de.unkrig.cscontrib.checks.WrapAndIndent.desc =\
	Verifies that statements are uniformly wrapped and indented.\n\
	<p style="color: red">\n\
	\  <b>This check supersedes the following checks:</b>\n\
	</p>\n\
	<ul style="color: red">\n\
	\  <li>Left curly brace placement</li>\n\
	\  <li>Right curly brace placement</li>\n\
	\  <li>Operator wrap</li>\n\
	</ul>\n\
	\n\
	Quickfixes are available for this check.
de.unkrig.cscontrib.checks.WrapAndIndent.basicOffset                 = How many spaces to use for each new indentation level.
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineClassDecl       = Whether to allow a complete class declaration in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineInterfaceDecl   = Whether to allow a complete interface declaration in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineEnumDecl        = Whether to allow a complete enum declaration in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineAnnoDecl        = Whether to allow a complete annotation declaration in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineCtorDecl        = Whether to allow a complete constructor declaration in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineMethDecl        = Whether to allow a complete method declaration in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.allowOneLineSwitchBlockStmtGroup = Whether to allow a complete {@code switch} block statement group in one single line
de.unkrig.cscontrib.checks.WrapAndIndent.wrapPackageDeclBeforePackage = Whether to wrap package declarations before the {@code package} keyword (in '"{@code package-info.java}")
de.unkrig.cscontrib.checks.WrapAndIndent.wrapClassDeclBeforeClass    = Whether to wrap class declarations before the {@code class} keyword
de.unkrig.cscontrib.checks.WrapAndIndent.wrapInterfaceDeclBeforeInterface = Whether to wrap interface declarations before the {@code interface} keyword
de.unkrig.cscontrib.checks.WrapAndIndent.wrapEnumDeclBeforeEnum      = Whether to wrap enum declarations before the {@code enum} keyword
de.unkrig.cscontrib.checks.WrapAndIndent.wrapAnnoDeclBeforeAt        = Whether to wrap annotation declarations before '@'
de.unkrig.cscontrib.checks.WrapAndIndent.wrapFieldDeclBeforeName     = Whether to wrap field declarations before the field name
de.unkrig.cscontrib.checks.WrapAndIndent.wrapCtorDeclBeforeName      = Whether to wrap constructor declarations between the modifiers and the class name
de.unkrig.cscontrib.checks.WrapAndIndent.wrapMethDeclBeforeName      = Whether to wrap method declarations between the return type and the method name
de.unkrig.cscontrib.checks.WrapAndIndent.wrapLocVarDeclBeforeName    = Whether to wrap local variable declarations between the type and the variable name
de.unkrig.cscontrib.checks.WrapAndIndent.wrapTypeDeclBeforeLCurly    = Whether to wrap type declarations before the opening curly brace
de.unkrig.cscontrib.checks.WrapAndIndent.wrapCtorDeclBeforeLCurly    = Whether to wrap constructors declaration before the opening curly brace
de.unkrig.cscontrib.checks.WrapAndIndent.wrapMethodDeclBeforeLCurly  = Whether to wrap method declarations before the opening curly brace
de.unkrig.cscontrib.checks.WrapAndIndent.wrapAnonClassDeclBeforeLCurly = Whether to wrap anonymous class declarations before the opening curly brace
de.unkrig.cscontrib.checks.WrapAndIndent.wrapDoBeforeLCurly          = Whether to wrap {@code do} statements before the opening curly brace
de.unkrig.cscontrib.checks.WrapAndIndent.wrapTryBeforeCatch          = Whether to wrap {@code try} statements before the {@code catch} keyword
de.unkrig.cscontrib.checks.WrapAndIndent.wrapTryBeforeFinally        = Whether to wrap {@code try} statements before the {@code finally} keyword
de.unkrig.cscontrib.checks.WrapAndIndent.wrapArrayInitBeforeLCurly   = Whether to wrap array initializers before the opening curly brace
de.unkrig.cscontrib.checks.WrapAndIndent.wrapBeforeBinaryOperator    = Whether to wrap expression before "+ - * / % &amp; | ^ << >> >>>", assignment operators and/or ". <= < == != >= > &amp;&amp; || instanceof"
de.unkrig.cscontrib.checks.WrapAndIndent.wrapAfterBinaryOperator     = Whether to wrap expression after "{@code + - * / % && | ^ << >> >>>", assignment operators and/or "{@code . <= < == != >= > && || instanceof}"

# --------------- de.unkrig.ZeroParameterSuperconstructorInvocation ---------------

de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation.name = de.unkrig.ZeroParameterSuperconstructorInvocation
de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation.desc =\
	Verifies that no constructor calls the zero-parameter superconstructor.\n\
	<pre>\n\
	class Foo extends Bar {\n\
	\    Foo(int a, int b) {\n\
	\        super(); // <===\n\
	\    }\n\
	}</pre>\n\
	\n\
	Quickfixes are available for this check.
