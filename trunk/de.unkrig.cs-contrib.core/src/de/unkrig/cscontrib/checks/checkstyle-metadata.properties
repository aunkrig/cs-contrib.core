
# This file was generated by the CS doclet; see http://cs-contrib.unkrig.de.

# Rule groups:
Coding.group     = Coding Problems
Naming.group     = Naming Conventions
Whitespace.group = Whitespace

# Custom checks, in alphabetical order.

# --------------- de.unkrig: Alignment ---------------

Alignment.name = de.unkrig: Alignment
Alignment.desc =\
	Verifies that Java elements are vertically aligned in immediately consecutive lines (and only there!):\n\
	<pre>\n\
	public class Main {\n\
	\n\
	\    int    <font color="red">x</font> = 7;\n\
	\    double <font color="red">xxx</font> = 7.0;              // Aligned field names\n\
	\n\
	\    int y      <font color="red">=</font> 7;\n\
	\    double yyy <font color="red">=</font> 7.0;              // Aligned field initializers\n\
	\n\
	\    public static void meth1(\n\
	\        String[] <font color="red">p1</font>,\n\
	\        int      <font color="red">p2</font>                // Aligned parameter names\n\
	\    ) {\n\
	\n\
	\        int    <font color="red">x</font> = 7;\n\
	\        double <font color="red">xxx</font> = 7.0;          // Aligned local variable names\n\
	\n\
	\        int y      <font color="red">=</font> 7;\n\
	\        double yyy <font color="red">=</font> 7.0;          // Aligned local variable initializers\n\
	\n\
	\        y   <font color="red">=</font> 8;\n\
	\        yyy <font color="red">=</font> 8.0;                 // Aligned assignments\n\
	\n\
	\        switch (x) {\n\
	\        case 1:  <font color="red">break;</font>\n\
	\        default: <font color="red">x++;</font> return;      // Aligned case groups statements\n\
	\        }\n\
	\    }\n\
	\n\
	\    public static void <font color="red">meth2</font>() {}\n\
	\    public void        <font color="red">meth33</font>() {} // Aligned method names\n\
	\n\
	\    public static void meth4()  <font color="red">{}</font>\n\
	\    public void meth5()         <font color="red">{}</font> // Aligned method bodies\n\
	}</pre>
Alignment.applyToFieldName               = Check alignment of first name in field declarations.
Alignment.applyToFieldInitializer        = Check alignment of first "=" in field declarations.
Alignment.applyToParameterName           = Check alignment of method (and constructor) parameter names.
Alignment.applyToLocalVariableName       = Check alignment of first name in local variable declarations.
Alignment.applyToLocalVariableInitializer = Check alignment of first "=" in local variable declarations.
Alignment.applyToAssignments             = Check alignment of "=" in assignments.
Alignment.applyToCaseGroupStatements     = Check alignment of first statement in case groups.
Alignment.applyToMethodName              = Check alignment of method (and constructor) names in declarations.
Alignment.applyToMethodBody              = Check alignment of "{" in method (and constructor) declarations.

# --------------- de.unkrig: C++-style comment alignment ---------------

CppCommentAlignment.name = de.unkrig: C++-style comment alignment
CppCommentAlignment.desc =\
	Verifies that C++-style comments ("<code>// ..&#46;</code>") are correctly aligned.\n\
	<p>\n\
	C++-style comments must appear on the same column iff\n\
	<ul>\n\
	\  <li>They appear in immediately consecutive lines, and\n\
	\  <li>All of these lines are of the same 'kind' (see below)\n\
	</ul>\n\
	Each line of code relates to one of the following 'kinds':\n\
	<ul>\n\
	\  <li>A line which contains only a C++-style comment\n\
	\  <li>A line which contains only a switch label ('<code>case x:</code>' or '<code>default:</code>') and a C++-style comment\n\
	\  <li>Any other line\n\
	</ul>

# --------------- de.unkrig: Inner assignment ---------------

InnerAssignment.name = de.unkrig: Inner assignment
InnerAssignment.desc =\
	Assignments in expressions must be parenthesized, like "a = (b = c)" or "while ((a = b))".\n\
	<p>\n\
	\  An enhanced version of 'InnerAssignment': It comes with a quickfix for ECLIPSE-CS.\n\
	</p>\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Parenthesize assignment\n\
	\  <dd>Parenthesizes the assignment to indicate that it is intentional.\n\
	</dl>

# --------------- de.unkrig: Name spelling ---------------

NameSpelling.name = de.unkrig: Name spelling
NameSpelling.desc =\
	Verifies that the names of Java elements match, respectively no not match given patterns.\n\
	<p>\n\
	This check makes name checking more powerful, compared with CheckStyle's standard "Naming Conventions" checks:\n\
	</p>\n\
	<ul>\n\
	\  <li>Arbitrary sets of required/missing modifiers can be specified</li>\n\
	\  <li>\n\
	\    Name patterns can not only be enforced but also be forbidden (useful, e.g., to forbid certains styles of\n\
	\    hungarian notation)\n\
	\  </li>\n\
	\  <li>\n\
	\    Adds the possibility to check the names of annotations, annotation fields and <code>enum</code>s (which are missing\n\
	\    from the standard checks)\n\
	\  </li>\n\
	</ul>\n\
	<p>\n\
	\  This check supersedes all of the CheckStyle standard "Naming Conventions" checks:\n\
	</p>\n\
	<ul>\n\
	\  <li>Abstract Class Name</li>\n\
	\  <li>Class Type Parameter Name</li>\n\
	\  <li>Constant Names</li>\n\
	\  <li>Enum Values Name</li>\n\
	\  <li>Interface Type Parameter Name</li>\n\
	\  <li>Local Final Variable Names</li>\n\
	\  <li>Local Variable Names</li>\n\
	\  <li>Member Names</li>\n\
	\  <li>Method Names</li>\n\
	\  <li>Method Type Parameter Name</li>\n\
	\  <li>Package Names</li>\n\
	\  <li>Parameter Names</li>\n\
	\  <li>Static Variable Names</li>\n\
	\  <li>Type Names</li>\n\
	</ul>
NameSpelling.elements                    = Elements to apply this check to.
NameSpelling.requiredModifiers           = Apply only to declarations which have these modifiers.
NameSpelling.missingModifiers            = Apply only to declarations which do not have these modifiers.
NameSpelling.option                      = Whether to require or forbid that names match.
NameSpelling.format                      = The pattern to match the name against.

# --------------- de.unkrig: Parenthesis padding ---------------

ParenPad.name = de.unkrig: Parenthesis padding
ParenPad.desc =\
	Enhanced version of "ParenPad": NOSPACE now allows C++ comments after the openining parenthesis.\n\
	<p>\n\
	\  <span style="color: red"><b>This check is superseded by <code>de.unkrig.Whitespace</code>.</b></span>\n\
	</p>
ParenPad.option                          = Whether space is required or forbidden.

# --------------- de.unkrig: Whitespace ---------------

Whitespace.name = de.unkrig: Whitespace
Whitespace.desc =\
	Verifies that tokens are, respectively are not preceded with (and/or followed by) whitespace.\n\
	<p>\n\
	\  This check supersedes all of CheckStyle's whitespace-related checks:\n\
	</p>\n\
	<ul>\n\
	\  <li>Generic Whitespace</li>\n\
	\  <li>Empty For Initializer Pad</li>\n\
	\  <li>Empty For Iterator Pad</li>\n\
	\  <li>No Whitespace After</li>\n\
	\  <li>No Whitespace Before</li>\n\
	\  <li>Method Parameter Pad</li>\n\
	\  <li>Paren Pad</li>\n\
	\  <li>Typecast Paren Pad</li>\n\
	\  <li>Whitespace After</li>\n\
	\  <li>Whitespace Around</li>\n\
	</ul>\n\
	<p>\n\
	\  , as well as\n\
	</p>\n\
	<ul>\n\
	\  <li>de.unkrig.ParenPad</li>\n\
	\  <li>de.unkrig.WhitespaceAround</li>\n\
	</ul>
Whitespace.whitespaceBefore              = The Java elements which must be preceded with whitespace (or a line break).
Whitespace.noWhitespaceBefore            = The Java elements which must not be preceded with whitespace (or are preceded with a line break).
Whitespace.whitespaceAfter               = The Java elements which must be followed by whitespace (or a line break).
Whitespace.noWhitespaceAfter             = The Java elements which must not be followed by whitespace (or are followed by a line break).

# --------------- de.unkrig: Whitespace around ---------------

WhitespaceAround.name = de.unkrig: Whitespace around
WhitespaceAround.desc =\
	Verifies that a token is surrounded by whitespace.\n\
	<p>\n\
	\  <span style="color: red"><b>This check is superseded by <code>de.unkrig.Whitespace</code>.</b></span>\n\
	</p>\n\
	<p>\n\
	\  Empty constructor bodies, method bodies, catch blocks and type bodies of the form\n\
	</p>\n\
	<pre>\n\
	public MyClass() {}           // empty constructor body\n\
	\n\
	public void func() {}         // empty method body\n\
	\n\
	public void func() {\n\
	\    new Object() {\n\
	\        // ...\n\
	\    }.hashCode();             // No space between '}' and '.' -- always allowed\n\
	\    try {\n\
	\        // ...\n\
	\    } catch {}                // empty catch block\n\
	}\n\
	\n\
	interface MyInterface {}      // emtpy type body\n\
	</pre>\n\
	<p>\n\
	\  may optionally be exempted from the policy using the allowEmptyMethods, allowEmptyConstructors, allowEmptyCatches\n\
	\  and allowEmptyTypes properties.\n\
	</p>
WhitespaceAround.tokens                  = Tokens to check.
WhitespaceAround.allowEmptyConstructors  = Allow empty constructor bodies.
WhitespaceAround.allowEmptyMethods       = Allow empty method bodies.
WhitespaceAround.allowEmptyCatches       = Allow empty catch blocks.
WhitespaceAround.allowEmptyTypes         = Allow empty class and interface bodies.
WhitespaceAround.ignoreEnhancedForColon  = Ignore the colon (":") token in enhanced FOR statements ("for (x : y) ...").

# --------------- de.unkrig: Wrap annotation ---------------

WrapAnnotationCheck.name = de.unkrig: Wrap annotation
WrapAnnotationCheck.desc =\
	Verifies that annotations and annotation type declarations are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapAnnotationCheck.allowOneLineDecl     = Whether to allow a complete annotation declaration in one single line.
WrapAnnotationCheck.wrapDeclBeforeAt     = Whether to wrap annotation declarations before "@".
WrapAnnotationCheck.wrapDeclBeforeLCurly = Whether to wrap annotation type declarations before the opening curly brace.
WrapAnnotationCheck.allowMultiplePerLine = Whether multiple annotations in one line are allowed.
WrapAnnotationCheck.wrapElementValueArrayInitializerBeforeLCurly = Whether to wrap element value array initializers before the opening curly brace.
WrapAnnotationCheck.allowMultipleElementValueArrayInitializersPerLine = Whether multiple element value array initializers in one line are allowed.

# --------------- de.unkrig: Wrap anonymous class ---------------

WrapAnonymousClassCheck.name = de.unkrig: Wrap anonymous class
WrapAnonymousClassCheck.desc =\
	Verifies that anonymous class declarations are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapAnonymousClassCheck.wrapDeclBeforeLCurly = Whether to wrap anonymous class declarations before the opening curly brace.

# --------------- de.unkrig: Wrap array initializer ---------------

WrapArrayInitCheck.name = de.unkrig: Wrap array initializer
WrapArrayInitCheck.desc =\
	Verifies that array initializers are uniformly wrapped and indented.\n\
	<p>\n\
	\  Array initializers appear in two different flavors:\n\
	</p>\n\
	<pre>\n\
	// NEW expression:\n\
	x = new String[3][4][] { { { "a", "b" } } };\n\
	\n\
	// Field or local variable initializer:\n\
	String[][] x = { { "a", "b" } };\n\
	</pre>\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapArrayInitCheck.wrapBeforeLCurly      = Whether to wrap array initializers before the opening curly brace.
WrapArrayInitCheck.allowMultipleValuesPerLine = Whether multiple array initializer values in one line are allowed.

# --------------- de.unkrig: Wrap binary operator ---------------

WrapBinaryOperatorCheck.name = de.unkrig: Wrap binary operator
WrapBinaryOperatorCheck.desc =\
	Verifies that binary operations are uniformly wrapped before and/or after the operator.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapBinaryOperatorCheck.wrapBeforeOperator = Whether to wrap expressions before a binary operator.
WrapBinaryOperatorCheck.wrapAfterOperator = Whether to wrap expressions after a binary operator.

# --------------- de.unkrig: Wrap class ---------------

WrapClassCheck.name = de.unkrig: Wrap class
WrapClassCheck.desc =\
	Verifies that class declarations are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapClassCheck.allowOneLineDecl          = Whether to allow a complete class declaration in one single line.
WrapClassCheck.wrapDeclBeforeClass       = Whether to wrap class declarations before the CLASS keyword.
WrapClassCheck.wrapDeclBeforeLCurly      = Whether to wrap class declarations before the opening curly brace.

# --------------- de.unkrig: Wrap constructor ---------------

WrapCtorCheck.name = de.unkrig: Wrap constructor
WrapCtorCheck.desc =\
	Verifies that constructore declarations, parameters and arguments are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapCtorCheck.allowOneLineDecl           = Whether to allow a complete constructor declaration in one single line.
WrapCtorCheck.wrapDeclBeforeName         = Whether to wrap constructor declarations between the modifiers and the class name.
WrapCtorCheck.wrapDeclBeforeLCurly       = Whether to wrap constructor declarations before the opening curly brace.
WrapCtorCheck.allowMultipleArgsPerLine   = Whether multiple constructor call arguments in one line are allowed.
WrapCtorCheck.allowMultipleParametersPerLine = Whether multiple constructor parameter declarations in one line are allowed.

# --------------- de.unkrig: Wrap DO statement ---------------

WrapDoCheck.name = de.unkrig: Wrap DO statement
WrapDoCheck.desc =\
	Verifies that DO statements are uniformly wrapped and indented.\n\
	<p>\n\
	\  The phrase "wrap before X" means that a line break and space appear right before "X", such that "X" is vertically\n\
	\  aligned with the first token in the immediately preceding line.\n\
	</p>\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapDoCheck.wrapBeforeLCurly             = Whether to wrap DO statements before the opening curly brace.

# --------------- de.unkrig: Wrap enum ---------------

WrapEnumCheck.name = de.unkrig: Wrap enum
WrapEnumCheck.desc =\
	Verifies that enum declarations and constants are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapEnumCheck.allowOneLineDecl           = Whether to allow a complete enum declaration in one single line.
WrapEnumCheck.wrapDeclBeforeEnum         = Whether to wrap enum declarations before the ENUM keyword.
WrapEnumCheck.wrapDeclBeforeLCurly       = Whether to wrap enum declarations before the opening curly brace.
WrapEnumCheck.allowMultipleConstantsPerLine = Whether multiple enum constant declarations in one line are allowed.

# --------------- de.unkrig: Wrap field ---------------

WrapFieldCheck.name = de.unkrig: Wrap field
WrapFieldCheck.desc =\
	Verifies that field declarations are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapFieldCheck.wrapDeclBeforeName        = Whether to wrap field declarations before the field name.

# --------------- de.unkrig: Wrap interface ---------------

WrapInterfaceCheck.name = de.unkrig: Wrap interface
WrapInterfaceCheck.desc =\
	Verifies that interface declarations are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapInterfaceCheck.allowOneLineDecl      = Whether to allow a complete interface declaration in one single line.
WrapInterfaceCheck.wrapDeclBeforeInterface = Whether to wrap interface declarations before the INTERFACE keyword.
WrapInterfaceCheck.wrapDeclBeforeLCurly  = Whether to wrap interface declarations before the opening curly brace.

# --------------- de.unkrig: Wrap local variable ---------------

WrapLocalVariableCheck.name = de.unkrig: Wrap local variable
WrapLocalVariableCheck.desc =\
	Verifies that local variable declarations are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapLocalVariableCheck.wrapDeclBeforeName = Whether to wrap local variable declarations between the type and the variable name.

# --------------- de.unkrig: Wrap method ---------------

WrapMethodCheck.name = de.unkrig: Wrap method
WrapMethodCheck.desc =\
	Verifies that method declarations, parameters and call arguments are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapMethodCheck.allowOneLineDecl         = Whether to allow a complete method declaration in one single line.
WrapMethodCheck.wrapDeclBeforeName       = Whether to wrap method declarations between the return type and the method name.
WrapMethodCheck.wrapMethodDeclBeforeLCurly = Whether to wrap method declarations before the opening curly brace.
WrapMethodCheck.allowMultipleArgsPerLine = Whether multiple method call arguments in one line are allowed.
WrapMethodCheck.allowMultipleParametersPerLine = Whether multiple method parameter declarations in one line are allowed.

# --------------- de.unkrig: Wrap package ---------------

WrapPackageCheck.name = de.unkrig: Wrap package
WrapPackageCheck.desc =\
	Verifies that package declarations are uniformly wrapped and indented.\n\
	<p>\n\
	\  The phrase "wrap before X" means that a line break and spaces appear right before "X", such that "X" is vertically\n\
	\  aligned with the first token in the immediately preceding line.\n\
	</p>\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapPackageCheck.wrapDeclBeforePackage   = Whether to wrap package declarations before the PACKAGE keyword (in "package-info.java").

# --------------- de.unkrig: Wrap switch block statement group ---------------

WrapSwitchBlockStmtGroupCheck.name = de.unkrig: Wrap switch block statement group
WrapSwitchBlockStmtGroupCheck.desc =\
	Verifies that switch block statement groups are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapSwitchBlockStmtGroupCheck.allowOneLineSwitchBlockStmtGroup = Whether to allow a complete SWITCH block statement group in one single line.

# --------------- de.unkrig: Wrap TRY statement ---------------

WrapTryCheck.name = de.unkrig: Wrap TRY statement
WrapTryCheck.desc =\
	Verifies that TRY statements are uniformly wrapped and indented.\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Wrap line\n\
	\  <dd>Wraps this line at the correct position.\n\
	\  <dt>Join lines\n\
	\  <dd>Appends this line to the previous.\n\
	\  <dt>Correct indentation\n\
	\  <dd>Corrects the indentation of this line.\n\
	</dl>
WrapTryCheck.wrapBeforeCatch             = Whether to wrap TRY statements before the CATCH keyword.
WrapTryCheck.wrapBeforeFinally           = Whether to wrap TRY statements before the FINALLY keyword.

# --------------- de.unkrig: Zero-parameter superconstructor invocation ---------------

ZeroParameterSuperconstructorInvocation.name = de.unkrig: Zero-parameter superconstructor invocation
ZeroParameterSuperconstructorInvocation.desc =\
	Verifies that no constructor calls the zero-parameter superconstructor.\n\
	<pre>\n\
	class Foo extends Bar {\n\
	\    Foo(int a, int b) {\n\
	\        <font color="red">super();</font>\n\
	\    }\n\
	}</pre>\n\
	\n\
	<h4>Quickfixes:</h4>\n\
	<dl>\n\
	\  <dt>Remove\n\
	\  <dd>Removes the redundant invocation of the zero-parameter superconstructor.\n\
	</dl>
