<project>

	<property file="local_build.properties" />
	<property file="build.properties" />

	<property name="commons.version"   value="1.2.12-SNAPSHOT" />
	<property name="doclet-cs.version" value="1.0.2-SNAPSHOT" />
	
	<!--
		This target is intended to be executed manually on-demoand; it is not part of the build process! Thus, the
		generated files are under SVN version control.
		
		Runs the 'CS doclet' to produce
			src/de.unkrig.cscontrib/{checks filters}/checkstyle.properties
			src/de.unkrig.cscontrib/{checks filters}/checkstyle.xml
			src/de.unkrig.cscontrib/{checks filters}/messages.properties
		.
	-->
	<target name="generate">

		<!--
			The only way to get classes from other (non-plug-in) projects into the plug-in appears to be to put JAR
			files on the 'Runtime Classpath' ("plugin.xml", tab "Runtime", Section "Classpath").
		-->
		<delete dir="libs" />
		<mkdir dir="libs" />

		<property name="de.unkrig.doclet.cs.annotation.jar" value="libs/de.unkrig.doclet.cs.annotation.jar" />
		<echo message="*** Generating '${de.unkrig.doclet.cs.annotation.jar}'..." />
		<copy
			file="${maven.repo}/de/unkrig/doclet-cs-annotation/${doclet-cs.version}/doclet-cs-annotation-${doclet-cs.version}.jar"
			tofile="${de.unkrig.doclet.cs.annotation.jar}"
		/>

		<property name="commons-nullanalysis.jar" value="libs/commons-nullanalysis.jar" />
		<echo message="*** Generating '${commons-nullanalysis.jar}'..." />
		<copy
			file="${maven.repo}/de/unkrig/commons/commons-nullanalysis/${commons.version}/commons-nullanalysis-${commons.version}.jar"
			tofile="${commons-nullanalysis.jar}"
		/>

		<echo message="*** Generating CS metadata from source code..." />
<!--
		<eclipse.convertPath resourcePath="no-template-core" property="no-template-core" />
		<path id="cs.doclet.path">

			<pathelement location="../de.unkrig.doclet.cs/bin"            />
			<pathelement location="../de.unkrig.doclet.cs.annotation/bin" />
			<pathelement location="${maven.repo}/de/unkrig/commons/commons-doclet/${commons.version}/commons-doclet-${commons.version}.jar" />
			<pathelement location="${maven.repo}/de/unkrig/commons/commons-lang/${commons.version}/commons-lang-${commons.version}.jar"     />
			<pathelement location="${maven.repo}/de/unkrig/commons/commons-text/${commons.version}/commons-text-${commons.version}.jar"     />
			<pathelement location="${no-template-core}/target/classes" />

			<!- - Unclear why this is needed: - ->
			<dirset  dir="." includes="bin" />

			<!- - Iff rules use 'option providers': - ->
			<fileset file="${maven.repo}/com/puppycrawl/tools/checkstyle/8.0/checkstyle-8.0.jar" />
		</path>
-->
		<path id="cs.doclet.path">
			<fileset file="${maven.repo}/de/unkrig/doclet-cs/${doclet-cs.version}/doclet-cs-${doclet-cs.version}-jar-with-dependencies.jar" />
		</path>

		<javadoc docletpathref="cs.doclet.path" doclet="de.unkrig.doclet.cs.CsDoclet">

			<!-- The 'CheckStyle packages' which contain the rules (checks, filters) to process: -->
			<sourcepath path="src" />
			<package name="de.unkrig.cscontrib.checks" />
			<package name="de.unkrig.cscontrib.filters" />

			<!-- Where to create the generated artifacts: -->
			<arg value="-checkstyle-metadata.properties-dir" /><arg file="src"       />
			<arg value="-checkstyle-metadata.xml-dir"        /><arg file="src"       />
			<arg value="-messages.properties-dir"            /><arg file="src"       />

			<classpath>

				<!-- Classes required by the rules: -->
				<pathelement location="${maven.repo}/de/unkrig/commons/commons-nullanalysis/${commons.version}/commons-nullanalysis-${commons.version}.jar" />

				<!-- Iff rules use 'option providers': -->
				<fileset file="${maven.repo}/com/puppycrawl/tools/checkstyle/8.0/checkstyle-8.0.jar" />
				<fileset file="${maven.repo}/com/google/guava/guava/22.0/guava-22.0.jar"             />
				<fileset dir="${osgi.syspath}" includes="net.sf.eclipsecs.core_*.jar" />

				<!-- Iff there are quickfixes: -->
				<fileset dir="${osgi.syspath}" includes="net.sf.eclipsecs.ui_*.jar"                />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.core.filebuffers_*.jar"       />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.core.resources_*.jar"         />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.core.runtime_*.jar"           />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.equinox.common_*.jar"         />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.jface_*.jar"                  />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.jdt.core_*.jar"               />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.osgi_*.jar"                   />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.swt.win32.win32.x86_64_*.jar" />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.text_*.jar"                   />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.ui.editors_*.jar"             />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.ui.ide_*.jar"                 />
				<fileset dir="${osgi.syspath}" includes="org.eclipse.ui.workbench_*.jar"           />

				<!-- The annotations for the CS doclet. -->
				<fileset file="${maven.repo}/de/unkrig/doclet-cs-annotation/${doclet-cs.version}/doclet-cs-annotation-${doclet-cs.version}.jar" />
			</classpath>
		</javadoc>
	</target>
</project>
